{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8wqapAXjsc24"
   },
   "source": [
    "# Gradient Boosting Descision Trees on Donors Choose Data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "8u5NhbnEsc2-"
   },
   "source": [
    "#### Response Coding: Example"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "HIFWmwHKsc3A"
   },
   "source": [
    "<img src='http://i.imgur.com/TufZptV.jpg' width=700px>\n",
    "\n",
    "> The response tabel is built only on train dataset.\n",
    "> For a category which is not there in train data and present in test data, we will encode them with default values\n",
    "Ex: in our test data if have State: D then we encode it as [0.5, 0.05]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "3KwfGufDsc3D"
   },
   "source": [
    "<ol>\n",
    "    <li><strong>Apply GBDT on these feature sets</strong>\n",
    "        <ul>\n",
    "            <li><font color='red'>Set 1</font>: categorical(instead of one hot encoding, try <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/handling-categorical-and-numerical-features/'>response coding</a>: use probability values), numerical features + project_title(TFIDF)+  preprocessed_eassay (TFIDF)+sentiment Score of eassay(check the bellow example, include all 4 values as 4 features)</li>\n",
    "            <li><font color='red'>Set 2</font>: categorical(instead of one hot encoding, try <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/handling-categorical-and-numerical-features/'>response coding</a>: use probability values), numerical features + project_title(TFIDF W2V)+  preprocessed_eassay (TFIDF W2V)</li>        </ul>\n",
    "    </li>\n",
    "    <li><strong>The hyper paramter tuning (Consider any two hyper parameters)</strong>\n",
    "        <ul>\n",
    "    <li>Find the best hyper parameter which will give the maximum <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/receiver-operating-characteristic-curve-roc-curve-and-auc-1/'>AUC</a> value</li>\n",
    "    <li>find the best hyper paramter using k-fold cross validation/simple cross validation data</li>\n",
    "    <li>use gridsearch cv or randomsearch cv or you can write your own for loops to do this task</li>\n",
    "        </ul>\n",
    "    </li>\n",
    "    <li>\n",
    "    <strong>Representation of results</strong>\n",
    "        <ul>\n",
    "    <li>You need to plot the performance of model both on train data and cross validation data for each hyper parameter, like shown in the figure\n",
    "    <img src='https://i.imgur.com/Gp2DQmh.jpg' width=500px> with X-axis as <strong>n_estimators</strong>, Y-axis as <strong>max_depth</strong>, and Z-axis as <strong>AUC Score</strong> , we have given the notebook which explains how to plot this 3d plot, you can find it in the same drive <i>3d_scatter_plot.ipynb</i></li>\n",
    "            <p style=\"text-align:center;font-size:30px;color:red;\"><strong>or</strong></p> <br>\n",
    "    <li>You need to plot the performance of model both on train data and cross validation data for each hyper parameter, like shown in the figure\n",
    "    <img src='https://i.imgur.com/fgN9aUP.jpg' width=300px> <a href='https://seaborn.pydata.org/generated/seaborn.heatmap.html'>seaborn heat maps</a> with rows as <strong>n_estimators</strong>, columns as <strong>max_depth</strong>, and values inside the cell representing <strong>AUC Score</strong> </li>\n",
    "    <li>You choose either of the plotting techniques out of 3d plot or heat map</li>\n",
    "    <li>Once after you found the best hyper parameter, you need to train your model with it, and find the AUC on test data and plot the ROC curve on both train and test.\n",
    "    <img src='https://i.imgur.com/wMQDTFe.jpg' width=300px></li>\n",
    "    <li>Along with plotting ROC curve, you need to print the <a href='https://www.appliedaicourse.com/course/applied-ai-course-online/lessons/confusion-matrix-tpr-fpr-fnr-tnr-1/'>confusion matrix</a> with predicted and original labels of test data points\n",
    "    <img src='https://i.imgur.com/IdN5Ctv.png' width=300px></li>\n",
    "            </ul>\n",
    "    <br>\n",
    "    <li>You need to summarize the results at the end of the notebook, summarize it in the table format\n",
    "        <img src='http://i.imgur.com/YVpIGGE.jpg' width=400px>\n",
    "    </li>\n",
    "</ol>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "ename": "ModuleNotFoundError",
     "evalue": "No module named 'gensim'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-1-8b8689e5fb73>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m     26\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mnltk\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mstem\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mwordnet\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mWordNetLemmatizer\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     27\u001b[0m \u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m---> 28\u001b[1;33m \u001b[1;32mfrom\u001b[0m \u001b[0mgensim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mWord2Vec\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m     29\u001b[0m \u001b[1;32mfrom\u001b[0m \u001b[0mgensim\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mmodels\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mKeyedVectors\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m     30\u001b[0m \u001b[1;32mimport\u001b[0m \u001b[0mpickle\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mModuleNotFoundError\u001b[0m: No module named 'gensim'"
     ]
    }
   ],
   "source": [
    "%matplotlib inline\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")\n",
    "\n",
    "import sqlite3\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import nltk\n",
    "import string\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "from sklearn.feature_extraction.text import TfidfTransformer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from nltk.stem.porter import PorterStemmer\n",
    "\n",
    "import re\n",
    "# Tutorial about Python regular expressions: https://pymotw.com/2/re/\n",
    "import string\n",
    "from nltk.corpus import stopwords\n",
    "from nltk.stem import PorterStemmer\n",
    "from nltk.stem.wordnet import WordNetLemmatizer\n",
    "\n",
    "from gensim.models import Word2Vec\n",
    "from gensim.models import KeyedVectors\n",
    "import pickle\n",
    "\n",
    "from tqdm import tqdm\n",
    "import os\n",
    "\n",
    "import plotly\n",
    "import plotly.offline as offline\n",
    "import plotly.graph_objs as go\n",
    "offline.init_notebook_mode()\n",
    "\n",
    "\n",
    "from collections import Counter"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "iffa2_WGsc3H",
    "outputId": "151fc2d5-3bc1-4206-9bd2-000dbf662b31"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "neg: 0.01, neu: 0.745, pos: 0.245, compound: 0.9975, "
     ]
    }
   ],
   "source": [
    "import nltk\n",
    "from nltk.sentiment.vader import SentimentIntensityAnalyzer\n",
    "\n",
    "# import nltk\n",
    "# nltk.download('vader_lexicon')\n",
    "\n",
    "sid = SentimentIntensityAnalyzer()\n",
    "\n",
    "for_sentiment = 'a person is a person no matter how small dr seuss i teach the smallest students with the biggest enthusiasm \\\n",
    "for learning my students learn in many different ways using all of our senses and multiple intelligences i use a wide range\\\n",
    "of techniques to help all my students succeed students in my class come from a variety of different backgrounds which makes\\\n",
    "for wonderful sharing of experiences and cultures including native americans our school is a caring community of successful \\\n",
    "learners which can be seen through collaborative student project based learning in and out of the classroom kindergarteners \\\n",
    "in my class love to work with hands on materials and have many different opportunities to practice a skill before it is\\\n",
    "mastered having the social skills to work cooperatively with friends is a crucial aspect of the kindergarten curriculum\\\n",
    "montana is the perfect place to learn about agriculture and nutrition my students love to role play in our pretend kitchen\\\n",
    "in the early childhood classroom i have had several kids ask me can we try cooking with real food i will take their idea \\\n",
    "and create common core cooking lessons where we learn important math and writing concepts while cooking delicious healthy \\\n",
    "food for snack time my students will have a grounded appreciation for the work that went into making the food and knowledge \\\n",
    "of where the ingredients came from as well as how it is healthy for their bodies this project would expand our learning of \\\n",
    "nutrition and agricultural cooking recipes by having us peel our own apples to make homemade applesauce make our own bread \\\n",
    "and mix up healthy plants from our classroom garden in the spring we will also create our own cookbooks to be printed and \\\n",
    "shared with families students will gain math and literature skills as well as a life long enjoyment for healthy cooking \\\n",
    "nannan'\n",
    "ss = sid.polarity_scores(for_sentiment)\n",
    "\n",
    "for k in ss:\n",
    "    print('{0}: {1}, '.format(k, ss[k]), end='')\n",
    "\n",
    "# we can use these 4 things as features/attributes (neg, neu, pos, compound)\n",
    "# neg: 0.0, neu: 0.753, pos: 0.247, compound: 0.93"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "BOyTl7oKsc3W"
   },
   "source": [
    "<h1>1. GBDT (xgboost/lightgbm) </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "VWge-b2Zsc3Z"
   },
   "source": [
    "## 1.1 Loading Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "WDZFu6-usc3d"
   },
   "outputs": [],
   "source": [
    "import pandas\n",
    "data = pandas.read_csv('preprocessed_data.csv',nrows = 50000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "mHvBlI_9N-4X"
   },
   "outputs": [],
   "source": [
    "# please write all the code with proper documentation, and proper titles for each subsection\n",
    "# go through documentations and blogs before you start coding\n",
    "# first figure out what to do, and then think about how to do.\n",
    "# reading and understanding error messages will be very much helpfull in debugging your code\n",
    "# when you plot any graph make sure you use \n",
    "    # a. Title, that describes your plot, this will be very helpful to the reader\n",
    "    # b. Legends if needed\n",
    "    # c. X-axis label\n",
    "    # d. Y-axis label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school_state</th>\n",
       "      <th>teacher_prefix</th>\n",
       "      <th>project_grade_category</th>\n",
       "      <th>teacher_number_of_previously_posted_projects</th>\n",
       "      <th>project_is_approved</th>\n",
       "      <th>clean_categories</th>\n",
       "      <th>clean_subcategories</th>\n",
       "      <th>essay</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>50000</td>\n",
       "      <td>50000</td>\n",
       "      <td>50000</td>\n",
       "      <td>50000.000000</td>\n",
       "      <td>50000.00000</td>\n",
       "      <td>50000</td>\n",
       "      <td>50000</td>\n",
       "      <td>50000</td>\n",
       "      <td>50000.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>51</td>\n",
       "      <td>5</td>\n",
       "      <td>4</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>45</td>\n",
       "      <td>357</td>\n",
       "      <td>49765</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>ca</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_prek_2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>literacy_language</td>\n",
       "      <td>literacy</td>\n",
       "      <td>our students come diverse backgrounds blue col...</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>7342</td>\n",
       "      <td>26757</td>\n",
       "      <td>20671</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>10642</td>\n",
       "      <td>4131</td>\n",
       "      <td>8</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9.392960</td>\n",
       "      <td>0.83986</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>313.384560</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>23.927948</td>\n",
       "      <td>0.36674</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>372.916859</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.690000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>107.060000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>228.805000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>399.990000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>356.000000</td>\n",
       "      <td>1.00000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>9999.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       school_state teacher_prefix project_grade_category  \\\n",
       "count         50000          50000                  50000   \n",
       "unique           51              5                      4   \n",
       "top              ca            mrs          grades_prek_2   \n",
       "freq           7342          26757                  20671   \n",
       "mean            NaN            NaN                    NaN   \n",
       "std             NaN            NaN                    NaN   \n",
       "min             NaN            NaN                    NaN   \n",
       "25%             NaN            NaN                    NaN   \n",
       "50%             NaN            NaN                    NaN   \n",
       "75%             NaN            NaN                    NaN   \n",
       "max             NaN            NaN                    NaN   \n",
       "\n",
       "        teacher_number_of_previously_posted_projects  project_is_approved  \\\n",
       "count                                   50000.000000          50000.00000   \n",
       "unique                                           NaN                  NaN   \n",
       "top                                              NaN                  NaN   \n",
       "freq                                             NaN                  NaN   \n",
       "mean                                        9.392960              0.83986   \n",
       "std                                        23.927948              0.36674   \n",
       "min                                         0.000000              0.00000   \n",
       "25%                                         0.000000              1.00000   \n",
       "50%                                         2.000000              1.00000   \n",
       "75%                                         7.000000              1.00000   \n",
       "max                                       356.000000              1.00000   \n",
       "\n",
       "         clean_categories clean_subcategories  \\\n",
       "count               50000               50000   \n",
       "unique                 45                 357   \n",
       "top     literacy_language            literacy   \n",
       "freq                10642                4131   \n",
       "mean                  NaN                 NaN   \n",
       "std                   NaN                 NaN   \n",
       "min                   NaN                 NaN   \n",
       "25%                   NaN                 NaN   \n",
       "50%                   NaN                 NaN   \n",
       "75%                   NaN                 NaN   \n",
       "max                   NaN                 NaN   \n",
       "\n",
       "                                                    essay         price  \n",
       "count                                               50000  50000.000000  \n",
       "unique                                              49765           NaN  \n",
       "top     our students come diverse backgrounds blue col...           NaN  \n",
       "freq                                                    8           NaN  \n",
       "mean                                                  NaN    313.384560  \n",
       "std                                                   NaN    372.916859  \n",
       "min                                                   NaN      0.690000  \n",
       "25%                                                   NaN    107.060000  \n",
       "50%                                                   NaN    228.805000  \n",
       "75%                                                   NaN    399.990000  \n",
       "max                                                   NaN   9999.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe(include = 'all')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school_state</th>\n",
       "      <th>teacher_prefix</th>\n",
       "      <th>project_grade_category</th>\n",
       "      <th>teacher_number_of_previously_posted_projects</th>\n",
       "      <th>project_is_approved</th>\n",
       "      <th>clean_categories</th>\n",
       "      <th>clean_subcategories</th>\n",
       "      <th>essay</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ca</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_prek_2</td>\n",
       "      <td>53</td>\n",
       "      <td>1</td>\n",
       "      <td>math_science</td>\n",
       "      <td>appliedsciences health_lifescience</td>\n",
       "      <td>i fortunate enough use fairy tale stem kits cl...</td>\n",
       "      <td>725.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>ut</td>\n",
       "      <td>ms</td>\n",
       "      <td>grades_3_5</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>specialneeds</td>\n",
       "      <td>specialneeds</td>\n",
       "      <td>imagine 8 9 years old you third grade classroo...</td>\n",
       "      <td>213.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>ca</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_prek_2</td>\n",
       "      <td>10</td>\n",
       "      <td>1</td>\n",
       "      <td>literacy_language</td>\n",
       "      <td>literacy</td>\n",
       "      <td>having class 24 students comes diverse learner...</td>\n",
       "      <td>329.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>ga</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_prek_2</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>appliedlearning</td>\n",
       "      <td>earlydevelopment</td>\n",
       "      <td>i recently read article giving students choice...</td>\n",
       "      <td>481.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>wa</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_3_5</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>literacy_language</td>\n",
       "      <td>literacy</td>\n",
       "      <td>my students crave challenge eat obstacles brea...</td>\n",
       "      <td>17.74</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  school_state teacher_prefix project_grade_category  \\\n",
       "0           ca            mrs          grades_prek_2   \n",
       "1           ut             ms             grades_3_5   \n",
       "2           ca            mrs          grades_prek_2   \n",
       "3           ga            mrs          grades_prek_2   \n",
       "4           wa            mrs             grades_3_5   \n",
       "\n",
       "   teacher_number_of_previously_posted_projects  project_is_approved  \\\n",
       "0                                            53                    1   \n",
       "1                                             4                    1   \n",
       "2                                            10                    1   \n",
       "3                                             2                    1   \n",
       "4                                             2                    1   \n",
       "\n",
       "    clean_categories                 clean_subcategories  \\\n",
       "0       math_science  appliedsciences health_lifescience   \n",
       "1       specialneeds                        specialneeds   \n",
       "2  literacy_language                            literacy   \n",
       "3    appliedlearning                    earlydevelopment   \n",
       "4  literacy_language                            literacy   \n",
       "\n",
       "                                               essay   price  \n",
       "0  i fortunate enough use fairy tale stem kits cl...  725.05  \n",
       "1  imagine 8 9 years old you third grade classroo...  213.03  \n",
       "2  having class 24 students comes diverse learner...  329.00  \n",
       "3  i recently read article giving students choice...  481.04  \n",
       "4  my students crave challenge eat obstacles brea...   17.74  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|████████████████████████████████████████████████████████████████████████████| 50000/50000 [10:39<00:00, 78.18it/s]\n"
     ]
    }
   ],
   "source": [
    "# adding the sentiment scores for the essays\n",
    "from tqdm import tqdm\n",
    "# we can use these 4 things as features/attributes (neg, neu, pos, compound)\n",
    "# neg: 0.0, neu: 0.753, pos: 0.247, compound: 0.93\n",
    "\n",
    "SID = SentimentIntensityAnalyzer()\n",
    "\n",
    "#http://www.nltk.org/howto/sentiment.html\n",
    "    \n",
    "neg = [] ;pos = []; neu = [] ; comp= []\n",
    "for i in tqdm(data['essay']):\n",
    "    neg.append(SID.polarity_scores(i)['neg'])\n",
    "    pos.append(SID.polarity_scores(i)['neu'])\n",
    "    neu.append(SID.polarity_scores(i)['pos'])\n",
    "    comp.append(SID.polarity_scores(i)['compound'])\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "data['negative'] = neg\n",
    "data['positive'] = pos\n",
    "data['neutral'] = neu\n",
    "data['compound'] = comp  \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>school_state</th>\n",
       "      <th>teacher_prefix</th>\n",
       "      <th>project_grade_category</th>\n",
       "      <th>teacher_number_of_previously_posted_projects</th>\n",
       "      <th>clean_categories</th>\n",
       "      <th>clean_subcategories</th>\n",
       "      <th>essay</th>\n",
       "      <th>price</th>\n",
       "      <th>negative</th>\n",
       "      <th>positive</th>\n",
       "      <th>neutral</th>\n",
       "      <th>compound</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>ca</td>\n",
       "      <td>mrs</td>\n",
       "      <td>grades_prek_2</td>\n",
       "      <td>53</td>\n",
       "      <td>math_science</td>\n",
       "      <td>appliedsciences health_lifescience</td>\n",
       "      <td>i fortunate enough use fairy tale stem kits cl...</td>\n",
       "      <td>725.05</td>\n",
       "      <td>0.013</td>\n",
       "      <td>0.783</td>\n",
       "      <td>0.205</td>\n",
       "      <td>0.9867</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "  school_state teacher_prefix project_grade_category  \\\n",
       "0           ca            mrs          grades_prek_2   \n",
       "\n",
       "   teacher_number_of_previously_posted_projects clean_categories  \\\n",
       "0                                            53     math_science   \n",
       "\n",
       "                  clean_subcategories  \\\n",
       "0  appliedsciences health_lifescience   \n",
       "\n",
       "                                               essay   price  negative  \\\n",
       "0  i fortunate enough use fairy tale stem kits cl...  725.05     0.013   \n",
       "\n",
       "   positive  neutral  compound  \n",
       "0     0.783    0.205    0.9867  "
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# to separate the labels & the features\n",
    "Y = data['project_is_approved'].values\n",
    "X = data.drop(['project_is_approved'], axis=1)\n",
    "X.head(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The total no of data points =  50000\n",
      "No of features available =  12\n"
     ]
    }
   ],
   "source": [
    "print(\"The total no of data points = \",X.shape[0])\n",
    "print(\"No of features available = \",X.shape[1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of projects that are approved for funding  41993 , ( 83.986 %)\n",
      "Number of projects that are not approved for funding  8007 , ( 16.014 %)\n"
     ]
    }
   ],
   "source": [
    "y_value_counts = data['project_is_approved'].value_counts()\n",
    "print(\"Number of projects that are approved for funding \", y_value_counts[1], \", (\", (y_value_counts[1]/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n",
    "print(\"Number of projects that are not approved for funding \", y_value_counts[0], \", (\", (y_value_counts[0]/(y_value_counts[1]+y_value_counts[0]))*100,\"%)\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "WtVV13Fyb3dH"
   },
   "source": [
    "<h2>1.2 Splitting data into Train and cross validation(or test): Stratified Sampling</h2>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "X_train,X_test,Y_train,Y_test = train_test_split(X,Y,test_size = 0.33, stratify = Y)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(33500, 12) (33500,)\n",
      "(16500, 12) (16500,)\n"
     ]
    }
   ],
   "source": [
    "print(X_train.shape, Y_train.shape)\n",
    "print(X_test.shape, Y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h2> 2.) Make Data Model Ready: Featurization</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.1) Essay"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1.1) Encoding essay TFiDF"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(33500, 10348)\n",
      "(16500, 10348)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "vectorizer_tfidf = TfidfVectorizer(min_df=10)\n",
    "vectorizer_tfidf.fit(X_train['essay'].values)\n",
    "\n",
    "X_train_essay_tfidf = vectorizer_tfidf.transform(X_train['essay'].values)\n",
    "X_test_essay_tfidf = vectorizer_tfidf.transform(X_test['essay'].values)\n",
    "\n",
    "\n",
    "print(X_train_essay_tfidf.shape)\n",
    "print(X_test_essay_tfidf.shape)\n",
    "print(\"=\"*100)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.1.2) Encoding essay TFiDF W2V"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "# stronging variables into pickle files python: http://www.jessicayung.com/how-to-use-pickle-to-save-and-load-variables-in-python/\n",
    "# make sure you have the glove_vectors file\n",
    "with open('glove_vectors', 'rb') as f:\n",
    "    model = pickle.load(f)\n",
    "    glove_words =  set(model.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "# S = [\"abc def pqr\", \"def def def abc\", \"pqr pqr def\"]\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "tfidf_model = TfidfVectorizer()\n",
    "tfidf_model.fit(X_train['essay'])\n",
    "\n",
    "# we are converting a dictionary with word as a key, and the idf as a value\n",
    "dictionary = dict(zip(tfidf_model.get_feature_names(), list(tfidf_model.idf_)))\n",
    "tfidf_words = set(tfidf_model.get_feature_names())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "35193"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(tfidf_words)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████| 33500/33500 [00:58<00:00, 569.92it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "33500\n",
      "300\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review in the training data.\n",
    "train_tfidf_w2v_essays = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_train['essay']): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    train_tfidf_w2v_essays.append(vector)\n",
    "\n",
    "train_tfidf_w2v_essayar = np.array(train_tfidf_w2v_essays) \n",
    "\n",
    "print(len(train_tfidf_w2v_essays))\n",
    "print(len(train_tfidf_w2v_essays[0]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(33500, 300)"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_tfidf_w2v_essayar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████| 16500/16500 [00:29<00:00, 561.35it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "16500\n",
      "300\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "# average Word2Vec\n",
    "# compute average word2vec for each review in the test data.\n",
    "test_tfidf_w2v_essays = []; # the avg-w2v for each sentence/review is stored in this list\n",
    "for sentence in tqdm(X_test['essay']): # for each review/sentence\n",
    "    vector = np.zeros(300) # as word vectors are of zero length\n",
    "    tf_idf_weight =0; # num of words with a valid vector in the sentence/review\n",
    "    for word in sentence.split(): # for each word in a review/sentence\n",
    "        if (word in glove_words) and (word in tfidf_words):\n",
    "            vec = model[word] # getting the vector for each word\n",
    "            # here we are multiplying idf value(dictionary[word]) and the tf value((sentence.count(word)/len(sentence.split())))\n",
    "            tf_idf = dictionary[word]*(sentence.count(word)/len(sentence.split())) # getting the tfidf value for each word\n",
    "            vector += (vec * tf_idf) # calculating tfidf weighted w2v\n",
    "            tf_idf_weight += tf_idf\n",
    "    if tf_idf_weight != 0:\n",
    "        vector /= tf_idf_weight\n",
    "    test_tfidf_w2v_essays.append(vector)\n",
    "    \n",
    "test_tfidf_w2v_essayar = np.array(test_tfidf_w2v_essays) \n",
    "print(len(test_tfidf_w2v_essays))\n",
    "print(len(test_tfidf_w2v_essays[0]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(16500, 300)"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_tfidf_w2v_essayar.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2.2) Response coding for categorical features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a function defined to get the response coding for each feature\n",
    "\n",
    "def response_coding(data, ytrain, feature):\n",
    "\n",
    "    \n",
    "    xtrain = X_train\n",
    "    unique_cat_labels = xtrain[feature].unique() # to get the unique feature in train data\n",
    "    data_cats = data[feature].unique() #  to get the unique feature in data being encoded\n",
    "    dictionary = dict()\n",
    "    for i in tqdm(range(len(data_cats))):\n",
    "        # if - else condition created for new features in test or cv data\n",
    "        if data_cats[i] in unique_cat_labels:\n",
    "        \n",
    "            total_count = xtrain.loc[:,feature][(xtrain[feature] == unique_cat_labels[i])].count()  ##https://stackoverflow.com/questions/66122577/response-coding-for-categorical-data\n",
    "            p_0 = xtrain.loc[:, feature][((xtrain[feature] == unique_cat_labels[i]) & (ytrain==0))].count()\n",
    "            p_1 = xtrain.loc[:, feature][((xtrain[feature] == unique_cat_labels[i]) & (ytrain==1))].count()\n",
    "\n",
    "            dictionary[data_cats[i]] = [p_1/total_count, p_0/total_count]\n",
    "        else :\n",
    "            \n",
    "            dictionary[data_cats[i]] = [0.5,0.5] # giving equal probability for unseen data in train data\n",
    "        \n",
    "        row = []\n",
    "        row.append(data_cats[i])\n",
    "        \n",
    "        row.append(p_1/total_count)\n",
    "        row.append(p_0/total_count)\n",
    "        \n",
    "    return dictionary\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "# a function defined to get the response coding values for each data point in dataset for the particular feature\n",
    "def response (data,ytrain,feature):\n",
    "    probs = response_coding(data, ytrain, feature)\n",
    "    \n",
    "    p = []\n",
    "    for i in tqdm(data[feature]):\n",
    "        p.append(probs[i])\n",
    "    arr = np.array(p)\n",
    "    \n",
    "    return arr"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.1) School State"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████████████████████████████████████████████| 51/51 [00:00<00:00, 150.76it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 33500/33500 [00:00<00:00, 2583791.84it/s]\n",
      "100%|█████████████████████████████████████████████████████████████████████████████████| 51/51 [00:00<00:00, 151.72it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 16500/16500 [00:00<00:00, 2742352.83it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After response coding\n",
      "(33500, 2)\n",
      "(16500, 2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "school_state_train = response(X_train,Y_train,'school_state')\n",
    "school_state_test =  response(X_test,Y_train,'school_state')\n",
    "\n",
    "print(\"After response coding\")\n",
    "print(school_state_train.shape)\n",
    "print(school_state_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.2) Teacher Prefix"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████████| 5/5 [00:00<00:00, 116.50it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 33500/33500 [00:00<00:00, 2583886.87it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████████████████| 5/5 [00:00<00:00, 131.82it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 16500/16500 [00:00<00:00, 1838190.02it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After response coding\n",
      "(33500, 2)\n",
      "(16500, 2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "teacher_prefix_train = response(X_train,Y_train,'teacher_prefix')\n",
    "teacher_prefix_test = response(X_test,Y_train,'teacher_prefix')\n",
    "\n",
    "print(\"After response coding\")\n",
    "print(teacher_prefix_train.shape)\n",
    "print(teacher_prefix_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.3) Project Grade Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 117.85it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 33500/33500 [00:00<00:00, 2790649.14it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████████████████| 4/4 [00:00<00:00, 117.96it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 16500/16500 [00:00<00:00, 2757431.51it/s]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After response coding\n",
      "(33500, 2)\n",
      "(16500, 2)\n"
     ]
    }
   ],
   "source": [
    "project_grade_category_train = response(X_train,Y_train,'project_grade_category')\n",
    "project_grade_category_test = response(X_test,Y_train,'project_grade_category')\n",
    "\n",
    "print(\"After response coding\")\n",
    "print(project_grade_category_train.shape)\n",
    "print(project_grade_category_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.4) Subject Category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|█████████████████████████████████████████████████████████████████████████████████| 44/44 [00:00<00:00, 153.11it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 33500/33500 [00:00<00:00, 2583696.82it/s]\n",
      "100%|█████████████████████████████████████████████████████████████████████████████████| 42/42 [00:00<00:00, 161.95it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 16500/16500 [00:00<00:00, 2350987.40it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After response coding\n",
      "(33500, 2)\n",
      "(16500, 2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "clean_categories_train = response(X_train,Y_train,'clean_categories')\n",
    "clean_categories_test = response(X_test,Y_train,'clean_categories')\n",
    "\n",
    "print(\"After response coding\")\n",
    "print(clean_categories_train.shape)\n",
    "print(clean_categories_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.2.5) Subject sub-category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|███████████████████████████████████████████████████████████████████████████████| 338/338 [00:02<00:00, 163.30it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 33500/33500 [00:00<00:00, 2398954.84it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████████████| 308/308 [00:01<00:00, 174.48it/s]\n",
      "100%|███████████████████████████████████████████████████████████████████████| 16500/16500 [00:00<00:00, 2742461.50it/s]"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After response coding\n",
      "(33500, 2)\n",
      "(16500, 2)\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "\n"
     ]
    }
   ],
   "source": [
    "clean_subcategories_train = response(X_train,Y_train,'clean_subcategories')\n",
    "clean_subcategories_test = response(X_test,Y_train,'clean_subcategories')\n",
    "\n",
    "print(\"After response coding\")\n",
    "print(clean_categories_train.shape)\n",
    "print(clean_categories_test.shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 2.3) Numerical Features"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 2.3.1) encoding numerical features: Price</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(33500, 1)\n",
      "(16500, 1)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "normalizer = Normalizer()\n",
    "\n",
    "normalizer.fit(X_train['price'].values.reshape(1,-1)) #as our array price has a single feature\n",
    "\n",
    "#norm means the normalized features\n",
    "\n",
    "X_train_price_norm = normalizer.transform(X_train['price'].values.reshape(1,-1)) \n",
    "X_test_price_norm = normalizer.transform(X_test['price'].values.reshape(1,-1))\n",
    "\n",
    "#reshaping after normalization ,for horizontally stacking the data\n",
    "X_train_price_norm = X_train_price_norm.reshape(-1,1)\n",
    "X_test_price_norm = X_test_price_norm.reshape(-1,1)\n",
    "\n",
    "\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_price_norm.shape)\n",
    "print(X_test_price_norm.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.00426378])"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_price_norm[1]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 2.3.2) encoding numerical features: number_of_previously_posted_projects</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After vectorizations\n",
      "(33500, 1)\n",
      "(16500, 1)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "from sklearn.preprocessing import Normalizer\n",
    "normalizer = Normalizer()\n",
    "\n",
    "normalizer.fit(X_train['teacher_number_of_previously_posted_projects'].values.reshape(-1,1)) #as our array price has a single feature\n",
    "\n",
    "X_train_teacher_number_of_previously_posted_projects_norm = normalizer.transform(X_train['teacher_number_of_previously_posted_projects'].values.reshape(1,-1)) \n",
    "X_test_teacher_number_of_previously_posted_projects_norm = normalizer.transform(X_test['teacher_number_of_previously_posted_projects'].values.reshape(1,-1))\n",
    "\n",
    "#reshaping after normalization ,for horizontally stacking the data\n",
    "\n",
    "X_train_teacher_number_of_previously_posted_projects_norm = X_train_teacher_number_of_previously_posted_projects_norm.reshape(-1,1)\n",
    "X_test_teacher_number_of_previously_posted_projects_norm = X_test_teacher_number_of_previously_posted_projects_norm.reshape(-1,1)\n",
    "\n",
    "print(\"After vectorizations\")\n",
    "print(X_train_teacher_number_of_previously_posted_projects_norm.shape)\n",
    "print(X_test_teacher_number_of_previously_posted_projects_norm.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.])"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_teacher_number_of_previously_posted_projects_norm[3]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 2.3.3) Encoding numerical features: sentiment(negative)</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After normalization\n",
      "(33500, 1)\n",
      "(16500, 1)\n"
     ]
    }
   ],
   "source": [
    "normalizer = Normalizer()\n",
    "normalizer.fit(X_train['negative'].values.reshape(-1,1)) \n",
    "\n",
    "\n",
    "senti_neg_train = normalizer.transform(X_train['negative'].values.reshape(1, -1))\n",
    "\n",
    "senti_neg_test = normalizer.transform(X_test['negative'].values.reshape(1, -1))\n",
    "\n",
    "\n",
    "#reshaping after normalization ,for horizontally stacking the data\n",
    "senti_neg_train = senti_neg_train.reshape(-1,1)\n",
    "senti_neg_test = senti_neg_test.reshape(-1,1)\n",
    "\n",
    "\n",
    "print('After normalization')\n",
    "print(senti_neg_train.shape)\n",
    "print(senti_neg_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 2.3.4) Encoding numerical features: sentiment(positive)</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After normalization\n",
      "(33500, 1)\n",
      "(16500, 1)\n"
     ]
    }
   ],
   "source": [
    "normalizer = Normalizer()\n",
    "normalizer.fit(X_train['positive'].values.reshape(-1,1)) \n",
    "\n",
    "\n",
    "senti_pos_train = normalizer.transform(X_train['positive'].values.reshape(1, -1))\n",
    "\n",
    "senti_pos_test = normalizer.transform(X_test['positive'].values.reshape(1, -1))\n",
    "\n",
    "\n",
    "#reshaping after normalization ,for horizontally stacking the data\n",
    "senti_pos_train = senti_pos_train.reshape(-1,1)\n",
    "senti_pos_test = senti_pos_test.reshape(-1,1)\n",
    "\n",
    "\n",
    "print('After normalization')\n",
    "print(senti_pos_train.shape)\n",
    "print(senti_pos_test.shape)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> 2.3.5) Encoding numerical features: sentiment(neutral)</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "After normalization\n",
      "(33500, 1)\n",
      "(16500, 1)\n"
     ]
    }
   ],
   "source": [
    "normalizer = Normalizer()\n",
    "normalizer.fit(X_train['neutral'].values.reshape(-1,1)) \n",
    "\n",
    "\n",
    "senti_neut_train = normalizer.transform(X_train['neutral'].values.reshape(1, -1))\n",
    "\n",
    "senti_neut_test = normalizer.transform(X_test['neutral'].values.reshape(1, -1))\n",
    "\n",
    "\n",
    "#reshaping after normalization ,for horizontally stacking the data\n",
    "senti_neut_train = senti_neut_train.reshape(-1,1)\n",
    "senti_neut_test = senti_neut_test.reshape(-1,1)\n",
    "\n",
    "\n",
    "print('After normalization')\n",
    "print(senti_neut_train.shape)\n",
    "print(senti_neut_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(33500, 1)\n",
      "(16500, 1)\n"
     ]
    }
   ],
   "source": [
    "#the compound scores are already normalized \n",
    "\n",
    "senti_comp_train = np.array(X_train['compound']).reshape(-1,1)\n",
    "senti_comp_test = np.array(X_test['compound']).reshape(-1,1)\n",
    "\n",
    "print(senti_comp_train.shape)\n",
    "print(senti_comp_test.shape)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set 1: categorical, numerical features(response coding) + essay (TFIDF) + Sentiment scores(essay)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.1) Stacking all the featurized features together for Set -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse import hstack"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix - SET A -> tfidf essay & response coded \n",
      "(33500, 10364) (33500,)\n",
      "(16500, 10364) (16500,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "X_train_S1  = hstack((X_train_essay_tfidf,school_state_train,teacher_prefix_train,teacher_prefix_train,clean_categories_train,clean_subcategories_train,X_train_price_norm,X_train_teacher_number_of_previously_posted_projects_norm,senti_neg_train,senti_pos_train,senti_neut_train,senti_comp_train)).tocsr()\n",
    "X_test_S1  = hstack((X_test_essay_tfidf,school_state_test,teacher_prefix_test,teacher_prefix_test,clean_categories_test,clean_subcategories_test,X_test_price_norm,X_test_teacher_number_of_previously_posted_projects_norm,senti_neg_test,senti_pos_test,senti_neut_test,senti_comp_test)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix - SET A -> tfidf essay & response coded \")\n",
    "print(X_train_S1.shape, Y_train.shape)\n",
    "print(X_test_S1.shape, Y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Set 2: categorical, numerical features(response coding)  + essay (TFIDF W2V) + Sentiment scores(essay)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 3.2) Stacking all the featurized features together for Set -2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "from scipy.sparse import coo_matrix\n",
    "#converting the tfidf w2v array of train & test data to a sparse matrix for stacking\n",
    "\n",
    "tr_tfidf_w2v = coo_matrix(train_tfidf_w2v_essayar)\n",
    "te_tfidf_w2v = coo_matrix(test_tfidf_w2v_essayar)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final Data matrix - SET A -> tfidf W2V essay & response coded \n",
      "(33500, 316) (33500,)\n",
      "(16500, 316) (16500,)\n",
      "====================================================================================================\n"
     ]
    }
   ],
   "source": [
    "X_train_S2  = hstack((tr_tfidf_w2v,school_state_train,teacher_prefix_train,teacher_prefix_train,clean_categories_train,clean_subcategories_train,X_train_price_norm,X_train_teacher_number_of_previously_posted_projects_norm,senti_neg_train,senti_pos_train,senti_neut_train,senti_comp_train)).tocsr()\n",
    "X_test_S2  = hstack((te_tfidf_w2v,school_state_test,teacher_prefix_test,teacher_prefix_test,clean_categories_test,clean_subcategories_test,X_test_price_norm,X_test_teacher_number_of_previously_posted_projects_norm,senti_neg_test,senti_pos_test,senti_neut_test,senti_comp_test)).tocsr()\n",
    "\n",
    "print(\"Final Data matrix - SET A -> tfidf W2V essay & response coded \")\n",
    "print(X_train_S2.shape, Y_train.shape)\n",
    "print(X_test_S2.shape, Y_test.shape)\n",
    "print(\"=\"*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "I5wDFj17sc3-"
   },
   "source": [
    "<h2> 4 ) Appling Models on different kind of featurization as mentioned in the instructions</h2>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "O5tWox1jsc3_"
   },
   "source": [
    "<br>Apply GBDT on different kind of featurization as mentioned in the instructions\n",
    "<br> For Every model that you work on make sure you do the step 2 and step 3 of instrucations"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1) Apply GBDT Classifier on Set -1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.ensemble import GradientBoostingClassifier\n",
    "from xgboost import XGBClassifier\n",
    "from lightgbm import LGBMClassifier"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Collecting lightgbm\n",
      "  Downloading lightgbm-3.2.1-py3-none-win_amd64.whl (1.0 MB)\n",
      "Requirement already satisfied: numpy in c:\\users\\ranap\\anaconda3\\lib\\site-packages (from lightgbm) (1.18.1)\n",
      "Requirement already satisfied: scipy in c:\\users\\ranap\\anaconda3\\lib\\site-packages (from lightgbm) (1.4.1)\n",
      "Requirement already satisfied: scikit-learn!=0.22.0 in c:\\users\\ranap\\anaconda3\\lib\\site-packages (from lightgbm) (0.22.1)\n",
      "Requirement already satisfied: wheel in c:\\users\\ranap\\anaconda3\\lib\\site-packages (from lightgbm) (0.34.2)\n",
      "Requirement already satisfied: joblib>=0.11 in c:\\users\\ranap\\anaconda3\\lib\\site-packages (from scikit-learn!=0.22.0->lightgbm) (0.14.1)\n",
      "Installing collected packages: lightgbm\n",
      "Successfully installed lightgbm-3.2.1\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install lightgbm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1.1) Hyperparameter Tuning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 11min 43s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score=nan,\n",
       "             estimator=LGBMClassifier(boosting_type='gbdt',\n",
       "                                      class_weight='balanced',\n",
       "                                      colsample_bytree=1.0,\n",
       "                                      importance_type='split',\n",
       "                                      learning_rate=0.1, max_depth=-1,\n",
       "                                      min_child_samples=20,\n",
       "                                      min_child_weight=0.001,\n",
       "                                      min_split_gain=0.0, n_estimators=100,\n",
       "                                      n_jobs=-1, num_leaves=31, objective=None,\n",
       "                                      random_state=None, reg_alpha=0.0,\n",
       "                                      reg_lambda=0.0, silent=True,\n",
       "                                      subsample=1.0, subsample_for_bin=200000,\n",
       "                                      subsample_freq=0),\n",
       "             iid='deprecated', n_jobs=-1,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500],\n",
       "                         'n_estimators': [1, 5, 10, 50, 100, 500]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring='roc_auc', verbose=0)"
      ]
     },
     "execution_count": 68,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "params={'n_estimators': [1, 5, 10, 50, 100, 500],'max_depth':[10, 50, 100, 500]}\n",
    "\n",
    "GBDT_1 = LGBMClassifier(class_weight='balanced')\n",
    "\n",
    "CV = GridSearchCV(GBDT_1,params,cv=3,scoring='roc_auc',n_jobs= -1,return_train_score=True)\n",
    "\n",
    "CV.fit(X_train_S1,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score:  0.7310208921320216\n",
      "k value with best score:  {'max_depth': 50, 'n_estimators': 50}\n",
      "===========================================================================\n",
      "Train AUC scores\n",
      "[0.68918771 0.7431735  0.77479437 0.89646369 0.94822393 0.99973893\n",
      " 0.68999632 0.7438851  0.77477992 0.89743319 0.95537007 0.99995815\n",
      " 0.68999632 0.7438851  0.77477992 0.89743319 0.95537007 0.99995815\n",
      " 0.68999632 0.7438851  0.77477992 0.89743319 0.95537007 0.99995815]\n",
      "CV AUC scores\n",
      "[0.64775076 0.6860084  0.69980443 0.7286476  0.72747287 0.71247257\n",
      " 0.6513231  0.68693332 0.69819603 0.73102089 0.72931875 0.70895856\n",
      " 0.6513231  0.68693332 0.69819603 0.73102089 0.72931875 0.70895856\n",
      " 0.6513231  0.68693332 0.69819603 0.73102089 0.72931875 0.70895856]\n"
     ]
    }
   ],
   "source": [
    "print('Best score: ',CV.best_score_)\n",
    "print('k value with best score: ',CV.best_params_)\n",
    "print('='*75)\n",
    "print('Train AUC scores')\n",
    "print(CV.cv_results_['mean_train_score'])\n",
    "print('CV AUC scores')\n",
    "print(CV.cv_results_['mean_test_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [],
   "source": [
    "params_S1 = CV.best_params_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "training is done \n"
     ]
    }
   ],
   "source": [
    "print('training is done ')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 4 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_scores = pd.DataFrame(CV.cv_results_).groupby(['param_n_estimators', 'param_max_depth']).max().unstack()[['mean_test_score', 'mean_train_score']]\n",
    "\n",
    "fig, ax = plt.subplots(1,2, figsize=(20,6))\n",
    "\n",
    "sns.heatmap(max_scores.mean_train_score, annot = True, fmt='.4g', ax=ax[0])\n",
    "sns.heatmap(max_scores.mean_test_score, annot = True, fmt='.4g', ax=ax[1])\n",
    "\n",
    "ax[0].set_title('Train Set')\n",
    "ax[1].set_title('CV Set')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1.2)Training using the best hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [],
   "source": [
    "def batch_predict(clf, data):\n",
    "    # roc_auc_score(y_true, y_score) the 2nd parameter should be probability estimates of the positive class\n",
    "    # not the predicted outputs\n",
    "    \n",
    "    y_data_pred = []\n",
    "    tr_loop = data.shape[0] - data.shape[0]%1000\n",
    "    # consider you X_tr shape is 49041, then your cr_loop will be 49041 - 49041%1000 = 49000\n",
    "    # in this for loop we will iterate unti the last 1000 multiplier\n",
    "    for i in range(0, tr_loop, 1000):\n",
    "        y_data_pred.extend(clf.predict_proba(data[i:i+1000])[:,1])\n",
    "    # we will be predicting for the last data points\n",
    "    y_data_pred.extend(clf.predict_proba(data[tr_loop:])[:,1])\n",
    "    \n",
    "    return y_data_pred"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# https://scikit-learn.org/stable/modules/generated/sklearn.metrics.roc_curve.html#sklearn.metrics.roc_curve\n",
    "from sklearn.metrics import roc_curve, auc\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "classifier = LGBMClassifier(n_estimators=50,max_depth=50,class_weight='balanced',n_jobs=-1)\n",
    "\n",
    "classifier.fit(X_train_S1, Y_train)\n",
    "#classifier_viz.fit(X_train1, y_train)\n",
    "\n",
    "y_train_pred = batch_predict(classifier,X_train_S1)\n",
    "y_test_pred = batch_predict(classifier,X_test_S1)\n",
    "#y_test_pred = batch_predict(classifier_viz,X_test1)\n",
    "\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n",
    "train_auc_S1 = auc(train_fpr, train_tpr)\n",
    "test_auc_S1 = auc(test_fpr, test_tpr)\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.1.3) Confusion Matrix For Train & Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(proba, threshould, fpr, tpr):\n",
    "    \n",
    "    t = threshould[np.argmax(fpr*(1-tpr))]\n",
    "    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n",
    "    predictions = []\n",
    "    global predictions1\n",
    "    for i in proba:\n",
    "        if i>=t:\n",
    "            predictions.append(1)\n",
    "        else:\n",
    "            predictions.append(0)\n",
    "    predictions1 = predictions\n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.604240472187501 for threshold 0.477\n",
      "the maximum value of tpr*(1-fpr) 0.42642809751203103 for threshold 0.517\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAsEAAAE/CAYAAACnwR6AAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAALEgAACxIB0t1+/AAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjMsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy+AADFEAAAgAElEQVR4nOzde1yUZf7/8dfAoGZIRoEQuXZwW1stLcmkDDIPQEomeUjwkFaaJZm/lSI1SfOUkZqreMptyUxBVDAXMfOURXmq1Sw7q4EYQpoICsIwvz/4NhsiKiMzyO37+XjcD52L+577njHffbzu674uk9VqtSIiIiIicgVxqe0LEBERERFxNhXBIiIiInLFUREsIiIiIlccFcEiIiIicsVRESwiIiIiVxwVwSIiIiJyxTHX9gWIc02aNImdO3cC8NNPP+Hn50eDBg0ASExMtP3+QjZu3Mhnn33GuHHjLvrcJSUlzJw5k23btmEymbBarXTr1o1hw4ZhMpnOe+ycOXNo0aIFnTt3vujziYgYRU1l9x+sViuDBw9m9uzZeHh4VPr5ihUrWLZsGaWlpVgsFu666y5iYmJwd3c/7/tu3LiR/fv3M2LEiGpdj0htUBF8hflz0frQQw8RFxfHHXfcUe336dSpE506darWMQkJCWRlZbF69WrMZjMnT55k0KBBXHvttfTt2/e8x27fvp3mzZtX+zpFRIygprL7DxaLhc8+++ycP/vyyy9ZuHAhycnJXHPNNZSWlhIbG8vEiROZPn36ed937969nDp1yu7rEnEmFcFSQatWrejUqRPffvstcXFxfPfddyQmJlJSUsKJEyd4+umniYiIYNWqVaxfv54FCxYwYMAA2rRpwxdffMGRI0cICAjgtddew8Wl4mib3NxcSkpKOHPmDGazmUaNGjF9+nTKysoAOHnyJJMnT+b777+npKSEgIAAXnzxRRITE9m3bx/Tp0/H1dWVLl261MZXIyJy2frhhx+YPHky+fn5WCwWnnjiCXr27ElBQQEvv/wyv/zyCy4uLtxxxx1MmDCBl19+GYDIyEjefvttmjRpYnuv3NxcysrKKCoq4pprrsFsNjNq1Ch+/vlnoLwXOT4+no8++oiysjKaNm1KbGwsmZmZJCcnY7FYcHd3Z+TIkbXyXYhcLBXBUkFJSQkdO3bkrbfeorCwkEmTJrFw4UKuvfZa/vvf/zJ48GAiIiIqHffLL7+wZMkSTp06RWhoKDt27KB9+/YV9hk8eDDPPvss7du3p3Xr1tx9990EBwfz97//HYApU6bQsmVLpk2bhsViISYmhnfeeYenn36a9PR0IiMjVQCLiJylpKSEkSNHMmPGDFq0aEF+fj59+vShefPmfP/995w5c4bU1FRKS0sZP348WVlZTJ06lTVr1rB06dJKwyEefPBB1q1bR8eOHWnRogV33XUXgYGBBAUFAbBy5Up+/vlnVqxYgdlsZunSpbzyyivMnz+fXr16cerUKRXAUieoCJZK/P39Abj66quZP38+W7du5eDBg3z77bdV3ubq2LEjLi4uuLu706xZM06cOFFpHx8fH1atWsWPP/7I9u3b2b59O3379iUmJobIyEi2bNnCV199RXJyMgBFRUWO+5AiIgbx008/kZmZyUsvvWRrO3PmDPv376d9+/a89dZbDBw4kPvuu48nn3ySpk2bUlpaWuX71atXj5kzZ5KTk8Pnn3/Ozp07efHFF+nQoQNvvvkmW7Zs4ZtvvuGxxx4DoKysjDNnzjj8c4rUNBXBUknDhg0B+PXXX+nbty99+vShbdu2hISEsHnz5nMe8+eHMv546O1s06dPp3fv3jRv3pzmzZsTGRlJamoqixYtIjIykrKyMt566y1uvfVWAPLz8y/4wJyIyJWurKyMxo0bk5qaamvLzc3Fw8OD+vXrs2HDBrZv387nn3/OoEGDmDx5Mvfff3+V77dixQq8vLx48MEH6dGjBz169GDYsGF07tyZ2NhYLBYLzzzzDH369AGguLiY/Px8h39OkZqmKdKkSvv27cPT05Nnn32WDh062Apgi8Vi1/sdO3aMt956i9OnTwPl48p++OEH23CIDh068O9//xur1cqZM2cYPnw47733HgCurq7n7bkQEblSNW/eHBcXF/7zn/8AcPjwYbp37863337LkiVLeOWVV3jggQd48cUXad++Pd988w2urq6YTKYqc/WNN94gJyfH9vqHH37gL3/5C+7u7nTo0IGkpCQKCgoAmDlzpm2MsdlsVlZLnaGeYKnS/fffT3JyMiEhIZhMJtq1a4enpyeHDh2y6/1iY2OZOXMmjzzyCPXq1aO0tJT27dszfvx4AMaOHcvkyZMJCwujpKSE++67j6eeegoofxp6xowZlJSU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r7+YPXs2VlZWuLi48OGHH7Jz506OHj1KWlpaqesXojTkc11yktmFq8zHVjL78VXpOsGl8dZbb5GZmUlYWFipt01KSmLlypUFzsF588032bRpE2fPngXyfyMPDQ3F2tpa77fch1VUG0rC0tKSkJAQVq5cqSvz9vYmNjZW77fPiIgIfvjhB15//fWHbnNFqerHtjRq1arFgQMHiIiI0JX99ttv1K1bt0zz84Qwlqr+uZbMLpgpHNvSkMyuOJVuOkRpWFpaMn78eGbPnq07qeDB+T8A69evB2Dz5s189913qFQqFEVh8ODBeHh4GOz3mWeeYd68ecyaNYu7d++Sk5NDly5dCA4OLlG7yqMN+/fv58CBA8yaNavIup577jmGDx+uO+GiTp06bNiwgblz57JixQoURaF58+Zs2rSpRJP1HxdybAv24PwyR0dHlixZwqpVqwgNDWXx4sVUq1YNjUbDypUrMTc3L3UdQhiLfK4ls0352BZEMvvRUimKojzqRgghhBBCCFGRTHo6hBBCCCGEEAWRTrAQQgghhKhypBMshBBCCCGqHOkECyGEEEKIKkc6wUIIIYQQosqRTrAQQgghhKhypBMshBBCCCGqHOkECyGEEEKIKuf/AdO5H4L3NO/CAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<Figure size 864x360 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#https://www.quantinsti.com/blog/creating-heatmap-using-python-seaborn\n",
    "import seaborn as sns; sns.set()\n",
    "\n",
    "con_m_train = confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_tpr))\n",
    "con_m_test = confusion_matrix(Y_test, predict(y_test_pred, te_thresholds, test_fpr, test_tpr))\n",
    "\n",
    "key = (np.asarray([['TN','FP'], ['FN', 'TP']]))\n",
    "fig, ax = plt.subplots(1,2, figsize=(12,5)) \n",
    "\n",
    "labels_train = (np.asarray([\"{0} = {1:.2f}\" .format(key, value) for key, value in zip(key.flatten(), con_m_train.flatten())])).reshape(2,2)\n",
    "labels_test = (np.asarray([\"{0} = {1:.2f}\" .format(key, value) for key, value in zip(key.flatten(), con_m_test.flatten())])).reshape(2,2)\n",
    "\n",
    "sns.heatmap(con_m_train, linewidths=.5, xticklabels=['PREDICTED : NO', 'PREDICTED : YES'], yticklabels=['ACTUAL : NO', 'ACTUAL : YES'], annot = labels_train, fmt = '', ax=ax[0])\n",
    "sns.heatmap(con_m_test, linewidths=.5, xticklabels=['PREDICTED : NO', 'PREDICTED : YES'], yticklabels=['ACTUAL : NO', 'ACTUAL : YES'], annot = labels_test, fmt = '', ax=ax[1])\n",
    "\n",
    "ax[0].set_title('Train Set')\n",
    "ax[1].set_title('Test Set')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2) Apply GBDT Classifier on Set - 2"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2.1) Hyperparameter Tuning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Wall time: 3min 20s\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=3, error_score=nan,\n",
       "             estimator=LGBMClassifier(boosting_type='gbdt',\n",
       "                                      class_weight='balanced',\n",
       "                                      colsample_bytree=1.0,\n",
       "                                      importance_type='split',\n",
       "                                      learning_rate=0.1, max_depth=-1,\n",
       "                                      min_child_samples=20,\n",
       "                                      min_child_weight=0.001,\n",
       "                                      min_split_gain=0.0, n_estimators=100,\n",
       "                                      n_jobs=-1, num_leaves=31, objective=None,\n",
       "                                      random_state=None, reg_alpha=0.0,\n",
       "                                      reg_lambda=0.0, silent=True,\n",
       "                                      subsample=1.0, subsample_for_bin=200000,\n",
       "                                      subsample_freq=0),\n",
       "             iid='deprecated', n_jobs=-1,\n",
       "             param_grid={'max_depth': [10, 50, 100, 500],\n",
       "                         'n_estimators': [1, 5, 10, 50, 100, 500]},\n",
       "             pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n",
       "             scoring='roc_auc', verbose=0)"
      ]
     },
     "execution_count": 71,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "%%time\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "params={'n_estimators': [1, 5, 10, 50, 100, 500],'max_depth':[10, 50, 100, 500]}\n",
    "\n",
    "GBDT_1 = LGBMClassifier(class_weight='balanced')\n",
    "\n",
    "CV = GridSearchCV(GBDT_1,params,cv=3,scoring='roc_auc',n_jobs= -1,return_train_score=True)\n",
    "\n",
    "CV.fit(X_train_S2,Y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Best score:  0.706482418451411\n",
      "k value with best score:  {'max_depth': 50, 'n_estimators': 100}\n",
      "===========================================================================\n",
      "Train AUC scores\n",
      "[0.68520879 0.75806314 0.78968396 0.90886928 0.9689914  0.99998581\n",
      " 0.68520879 0.75806314 0.78972129 0.90900619 0.97113829 0.99998449\n",
      " 0.68520879 0.75806314 0.78972129 0.90900619 0.97113829 0.99998449\n",
      " 0.68520879 0.75806314 0.78972129 0.90900619 0.97113829 0.99998449]\n",
      "CV AUC scores\n",
      "[0.62331897 0.66666468 0.67830018 0.70641803 0.70484389 0.69233298\n",
      " 0.62331897 0.66666468 0.67861356 0.70585425 0.70648242 0.69280714\n",
      " 0.62331897 0.66666468 0.67861356 0.70585425 0.70648242 0.69280714\n",
      " 0.62331897 0.66666468 0.67861356 0.70585425 0.70648242 0.69280714]\n"
     ]
    }
   ],
   "source": [
    "print('Best score: ',CV.best_score_)\n",
    "print('k value with best score: ',CV.best_params_)\n",
    "print('='*75)\n",
    "print('Train AUC scores')\n",
    "print(CV.cv_results_['mean_train_score'])\n",
    "print('CV AUC scores')\n",
    "print(CV.cv_results_['mean_test_score'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'max_depth': 50, 'n_estimators': 100}"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "params_S2 = CV.best_params_\n",
    "params_S2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x432 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "max_scores = pd.DataFrame(CV.cv_results_).groupby(['param_n_estimators', 'param_max_depth']).max().unstack()[['mean_test_score', 'mean_train_score']]\n",
    "\n",
    "fig, ax = plt.subplots(1,2, figsize=(20,6))\n",
    "\n",
    "sns.heatmap(max_scores.mean_train_score, annot = True, fmt='.4g', ax=ax[0])\n",
    "sns.heatmap(max_scores.mean_test_score, annot = True, fmt='.4g', ax=ax[1])\n",
    "\n",
    "ax[0].set_title('Train Set')\n",
    "ax[1].set_title('CV Set')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2.2)Training using the best hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "from sklearn.metrics import roc_curve, auc\n",
    "from lightgbm import LGBMClassifier\n",
    "\n",
    "classifier = LGBMClassifier(n_estimators=50,max_depth=100,class_weight='balanced',n_jobs=-1)\n",
    "\n",
    "classifier.fit(X_train_S2, Y_train)\n",
    "#classifier_viz.fit(X_train1, y_train)\n",
    "\n",
    "y_train_pred = batch_predict(classifier,X_train_S2)\n",
    "y_test_pred = batch_predict(classifier,X_test_S2)\n",
    "#y_test_pred = batch_predict(classifier_viz,X_test1)\n",
    "\n",
    "train_fpr, train_tpr, tr_thresholds = roc_curve(Y_train, y_train_pred)\n",
    "test_fpr, test_tpr, te_thresholds = roc_curve(Y_test, y_test_pred)\n",
    "train_auc_S2 = auc(train_fpr, train_tpr)\n",
    "test_auc_S2 = auc(test_fpr, test_tpr)\n",
    "\n",
    "plt.plot(train_fpr, train_tpr, label=\"Train AUC =\"+str(auc(train_fpr, train_tpr)))\n",
    "plt.plot(test_fpr, test_tpr, label=\"Test AUC =\"+str(auc(test_fpr, test_tpr)))\n",
    "plt.legend()\n",
    "plt.xlabel(\"True Positive Rate(TPR)\")\n",
    "plt.ylabel(\"False Positive Rate(FPR)\")\n",
    "plt.title(\"AUC\")\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4.2.3) Confusion Matrix For Train & Test Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [],
   "source": [
    "def predict(proba, threshould, fpr, tpr):\n",
    "    \n",
    "    t = threshould[np.argmax(fpr*(1-tpr))]\n",
    "    print(\"the maximum value of tpr*(1-fpr)\", max(tpr*(1-fpr)), \"for threshold\", np.round(t,3))\n",
    "    predictions = []\n",
    "    global predictions1\n",
    "    for i in proba:\n",
    "        if i>=t:\n",
    "            predictions.append(1)\n",
    "        else:\n",
    "            predictions.append(0)\n",
    "    predictions1 = predictions\n",
    "    return predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "the maximum value of tpr*(1-fpr) 0.604240472187501 for threshold 0.477\n",
      "the maximum value of tpr*(1-fpr) 0.42642809751203103 for threshold 0.517\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 864x360 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#https://www.quantinsti.com/blog/creating-heatmap-using-python-seaborn\n",
    "import seaborn as sns; sns.set()\n",
    "\n",
    "con_m_train = confusion_matrix(Y_train, predict(y_train_pred, tr_thresholds, train_fpr, train_tpr))\n",
    "con_m_test = confusion_matrix(Y_test, predict(y_test_pred, te_thresholds, test_fpr, test_tpr))\n",
    "\n",
    "key = (np.asarray([['TN','FP'], ['FN', 'TP']]))\n",
    "fig, ax = plt.subplots(1,2, figsize=(12,5)) \n",
    "\n",
    "labels_train = (np.asarray([\"{0} = {1:.2f}\" .format(key, value) for key, value in zip(key.flatten(), con_m_train.flatten())])).reshape(2,2)\n",
    "labels_test = (np.asarray([\"{0} = {1:.2f}\" .format(key, value) for key, value in zip(key.flatten(), con_m_test.flatten())])).reshape(2,2)\n",
    "\n",
    "sns.heatmap(con_m_train, linewidths=.5, xticklabels=['PREDICTED : NO', 'PREDICTED : YES'], yticklabels=['ACTUAL : NO', 'ACTUAL : YES'], annot = labels_train, fmt = '', ax=ax[0])\n",
    "sns.heatmap(con_m_test, linewidths=.5, xticklabels=['PREDICTED : NO', 'PREDICTED : YES'], yticklabels=['ACTUAL : NO', 'ACTUAL : YES'], annot = labels_test, fmt = '', ax=ax[1])\n",
    "\n",
    "ax[0].set_title('Train Set')\n",
    "ax[1].set_title('Test Set')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "colab": {},
    "colab_type": "code",
    "id": "ARWulYUwsc4B"
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "colab_type": "text",
    "id": "YhFN-lDWsc4G"
   },
   "source": [
    "<h1>3. Summary</h1>\n",
    "\n",
    "<br> as mentioned in the step 4 of instructions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "+--------------------------------+----------------------------------------+--------------------+--------------------+\n",
      "|           Vectorizer           |            best parameters             |     AUC Train      |      AUC Test      |\n",
      "+--------------------------------+----------------------------------------+--------------------+--------------------+\n",
      "|    Response coding + TfiDF     | {'max_depth': 50, 'n_estimators': 50}  | 0.8605862163371218 | 0.7010165779018047 |\n",
      "| Response coding + TfiDF - W2V  | {'max_depth': 50, 'n_estimators': 100} | 0.8637226618896278 | 0.6811882723315943 |\n",
      "+--------------------------------+----------------------------------------+--------------------+--------------------+\n"
     ]
    }
   ],
   "source": [
    "# Please compare all your models using Prettytable library\n",
    "# http://zetcode.com/python/prettytable/\n",
    "from prettytable import PrettyTable\n",
    "TB = PrettyTable()\n",
    "\n",
    "TB.field_names = [\"Vectorizer\", \"best parameters\", \"AUC Train\", \"AUC Test\"]\n",
    "\n",
    "TB.add_row([\"Response coding + TfiDF\", params_S1, train_auc_S1, test_auc_S1])\n",
    "TB.add_row([\"Response coding + TfiDF - W2V \", params_S2, train_auc_S2, test_auc_S2])\n",
    "\n",
    "\n",
    "print(TB)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Here we see that the train AUC for tfidf & TF-iDF W2V features is nearly same but there's a difference while the Test data comes to play.\n",
    "The tfidf is better than tfidfW2V by a slight margin.The GBDT also performs better than descision trees evident from our performance scores in previous assignments.\n",
    "\n",
    "Also, here we've used LightGBM reason being, Faster training speed and higher efficiency: Light GBM use histogram based algorithm i.e it buckets continuous feature values into discrete bins which fasten the training procedure.(Src:Google)\n",
    "\n",
    "So,eventually testing for different sets of features always backs our selection criteria for which features,featurizations to consider.\n",
    "\n",
    "======================================================================================================================\n",
    "\n",
    "Reference :- AAIC reference notebooks, Applied AI course"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "collapsed_sections": [],
   "name": "11_Assignment_GBDT_Instructions.ipynb",
   "provenance": [],
   "version": "0.3.2"
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
